Interface
Write Interface

interface write_control_intf(input logic clk_write_logic, input logic reset);
bit [`ADDR_WIDTH:0] read_pointer;
logic write_request;
logic w_enable;
logic write_ack;
bit [`ADDR_WIDTH:0] write_pointer;
logic full_fifo_status;
logic halffull_fifo_status;

logic scan_in0, scan_en, test_mode, scan_out0;
clocking cb@(posedge clk_write_logic);
output reset;
output read_pointer;
output write_request;
output scan_in0, scan_en, test_mode;
input w_enable;
input write_ack;
input write_pointer;
input full_fifo_status;
input halffull_fifo_status;
input scan_out0;
endclocking:cb
modport WC(clocking cb, input clk_write_logic);
endinterface:write_control_intf

Read control interface

interface read_control_intf(input logic clk_read_logic, input logic reset);
logic reset;
bit [`ADDR_WIDTH:0] write_pointer;
logic read_request;
logic r_enable;
logic read_ack;
bit [`ADDR_WIDTH:0] read_pointer;
logic empty_fifo_status;
logic halfempty_fifo_status;
logic scan_in0, scan_en, test_mode, scan_out0;
clocking cb@(posedge clk_read_logic);
output reset;
output write_pointer;
output read_request;
output scan_in0, scan_en, test_mode;
input r_enable;
input read_ack;
input read_pointer;
input empty_fifo_status;
input halfempty_fifo_status;
input scan_out0;
endclocking:cb
modport RC(clocking cb, input clk_read_logic);
endinterface:read_control_intf

Memory array interface

interface mem_array_intf(input logic clk_write_logic);
logic clk_read_logic;
bit [`ADDR_WIDTH-1:0] w_addr;
bit [`ADDR_WIDTH-1:0] r_addr;
logic w_enable;
logic r_enable;
bit [`DATA_WIDTH-1:0] w_data;
bit [`DATA_WIDTH-1:0] r_data;
clocking cb@(posedge clk_write_logic);
output clk_read_logic;
output w_addr;
output r_addr;
output w_enable;
output r_enable;
output w_data;
input r_data;
endclocking:cb
modport MEM(clocking cb, input clk_write_logic);
endinterface:mem_array_intf