`include "interface.sv"
`include "SFIFO_package.sv"
`define write_logic_half_clock_period 100
`define read_logic_half_clock_period 1000

module test;
,→
import uvm_pkg::*;
import SFIFO_package::*;

bit clk_write_logic;
bit clk_read_logic;
bit reset;
bit scan_en, scan_in0, test_mode;
wire scan_out0;
assign scan_out0 = 1'b0;
initial begin
scan_en = 1'b0;
scan_in0 = 1'b0;
test_mode = 1'b0;
clk_write_logic = 1'b0;
clk_read_logic = 1'b0;
reset = 0;
#25 reset = 1;
#25 reset = 0;
end

always begin #`write_logic_half_clock_period clk_write_logic <= ~ clk_write_logic;
#`read_logic_half_clock_period clk_read_logic <= ~ clk_read_logic;
end
//Interface instantiation
write_control_intf w_ctrl(clk_write_logic, reset);
read_control_intf r_ctrl(clk_read_logic, reset);
mem_array_intf memory_intf(clk_write_logic);
//------------------------------------------------------------------------------------------
SFIFO top (
.reset(w_ctrl.reset),
.clk_write_logic(w_ctrl.clk_write_logic),
.clk_read_logic(r_ctrl.clk_read_logic),
.read_request(r_ctrl.read_request),
.w_data(memory_intf.w_data),
.write_request(w_ctrl.write_request),
.r_data(memory_intf.r_data),
.read_ack(r_ctrl.read_ack),
.w_enable(w_ctrl.w_enable),
.r_enable(r_ctrl.r_enable),
.empty_fifo_status(r_ctrl.empty_fifo_status),
.halfempty_fifo_status(r_ctrl.halfempty_fifo_status),
.full_fifo_status(w_ctrl.full_fifo_status),
.halffull_fifo_status(w_ctrl.halffull_fifo_status),
.write_ack(w_ctrl.write_ack),
.scan_in0(scan_in0),
.scan_en(scan_en),
.test_mode(test_mode),
.scan_out0(scan_out0)
);

initial begin
$set_coverage_db_name("SFIFO");
$timeformat(-9,2,"ns", 16);
`ifdef SDFSCAN
$sdf_annotate("sdf/SFIFO_tsmc18_scan.sdf", test.top);
`endif
uvm_config_db#(virtual write_control_intf)::set(uvm_root::get(), "*",
,→ "w_ctrl", w_ctrl);
uvm_config_db#(virtual read_control_intf)::set(uvm_root::get(), "*", "r_ctrl",
,→ r_ctrl);
uvm_config_db#(virtual mem_array_intf)::set(uvm_root::get(),
,→ "*", "memory_intf", memory_intf);
run_test("test");
end
endmodule:test